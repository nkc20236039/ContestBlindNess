//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/KeyConfig/UtilityLayer/DemoInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DemoInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DemoInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DemoInput"",
    ""maps"": [
        {
            ""name"": ""DemoActionMap"",
            ""id"": ""c2ce31e8-2ae5-417c-9071-9c6819e85de0"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""ae34dc8f-6ff2-4822-9142-ddf6c7d6ca5d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""c1a5a9a3-a4ce-4196-b4ef-578fc7ddcad6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""cb063f75-ebe1-4734-8965-fc6b01f4c787"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9e2d5b64-eb32-4fd7-a6e1-a09e7dc1a3ba"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""66808c7f-4f62-442b-a8fe-84dcf5250a5b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0d050c30-8e73-42e8-9c1c-8e9dd3ed547b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""432e626c-996c-41a1-8f4d-89baf77483b8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7c19c184-06a1-41de-82a7-83abc9c5afae"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DemoActionMap
        m_DemoActionMap = asset.FindActionMap("DemoActionMap", throwIfNotFound: true);
        m_DemoActionMap_Move = m_DemoActionMap.FindAction("Move", throwIfNotFound: true);
        m_DemoActionMap_Jump = m_DemoActionMap.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DemoActionMap
    private readonly InputActionMap m_DemoActionMap;
    private List<IDemoActionMapActions> m_DemoActionMapActionsCallbackInterfaces = new List<IDemoActionMapActions>();
    private readonly InputAction m_DemoActionMap_Move;
    private readonly InputAction m_DemoActionMap_Jump;
    public struct DemoActionMapActions
    {
        private @DemoInput m_Wrapper;
        public DemoActionMapActions(@DemoInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_DemoActionMap_Move;
        public InputAction @Jump => m_Wrapper.m_DemoActionMap_Jump;
        public InputActionMap Get() { return m_Wrapper.m_DemoActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DemoActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IDemoActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_DemoActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DemoActionMapActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IDemoActionMapActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IDemoActionMapActions instance)
        {
            if (m_Wrapper.m_DemoActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDemoActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_DemoActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DemoActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DemoActionMapActions @DemoActionMap => new DemoActionMapActions(this);
    public interface IDemoActionMapActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
